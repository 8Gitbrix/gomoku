
==================== FINAL INTERFACE ====================
2017-10-07 21:21:36.418208 UTC

interface main@main:Player.BestNext 8002
  interface hash: 9898ca66c156fc3632d5a73fa300f444
  ABI hash: 761ade5e13c556cf47612b81fab89bbb
  export-list hash: 50dafd86d6e0ea03ef8ab6ac708c1280
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e397bc60a6586cf79b495f4bca34f357
  sig of: Nothing
  used TH splices: False
  where
exports:
  Player.BestNext.playerBestNext
module dependencies: Checks Types
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  Checks 45043d71f304e946e6d8ad579cadf002
  exports: 67c2c1a957e3dbdb15359134cee28e21
  scoreBoard 13d00a646887471a6b6b99bd7e1d76f1
import  -/  Types eaeec73556c2e2bcf8ca22ab00a50713
  exports: 2e31c236f81ee30d65781f7ce55b596d
  Board 242b0ce61f3903330f3b883851d622c0
  Move 0d3405d3da72a5980cbce361e99eda30
  Player 7ffc29fbfc3be2ec15169276e73e1051
  Player c01f365c11054d72d1b22907633ee3db
  Tile b7da88f9b458cbc8de2b41cb557c0dd9
  put 390d46ef530fbccf2ea03c5ce0743a98
  validMoves 0a71f632f8fed7a1a169232f34c07bb6
2968ec0d5b4f4d660f5c6f282d751415
  $smaximum1 :: (GHC.Types.Int, Types.Move)
  {- Strictness: x -}
44b5888d26b1b828a766abc73d304c30
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Player.BestNext.$trModule2
                   Player.BestNext.$trModule1) -}
b2d90e3f2519bb2dbe3ebea8c771b536
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Player.BestNext"#) -}
c9fce19643698a8fecb7b65d7bb73581
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
12a45dba47a9b78def531b31f8b81c88
  $wgo1 ::
    [(GHC.Types.Int, Types.Move)]
    -> GHC.Types.Int -> Types.Move -> (# GHC.Types.Int, Types.Move #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,U(U)><L,U(U(U),U(U))>, Inline: [0] -}
0d55e4a544f3ddf98a3ab527ba2dbc46
  playerBestNext :: Types.Player
  {- Strictness: m,
     Unfolding: (Types.Player
                   Player.BestNext.playerBestNext2
                     `cast`
                   (<Types.Tile>_R
                    ->_R <Types.Board>_R
                    ->_R Sym (GHC.Types.N:IO[0] <Types.Move>_R))
                   Player.BestNext.playerBestNext1) -}
1ce5061b52808cf3ba7ca0691e1a701b
  playerBestNext1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Best Next"#) -}
6192d570f0494e9659ab1da7b3c1af76
  playerBestNext2 ::
    Types.Tile
    -> Types.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Types.Move #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (tile :: Types.Tile)
                   (board :: Types.Board)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta,
                    let {
                      moves :: [Types.Move] = Types.validMoves_go board
                    } in
                    letrec {
                      go :: [(GHC.Types.Int, GHC.Types.Int)]
                            -> [(GHC.Types.Int, GHC.Types.Int)]
                            -> [(GHC.Types.Int, (GHC.Types.Int, GHC.Types.Int))]
                        {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                      = \ (ds :: [(GHC.Types.Int, GHC.Types.Int)])
                          (eta1 :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                        case ds of wild {
                          []
                          -> GHC.Types.[] @ (GHC.Types.Int, (GHC.Types.Int, GHC.Types.Int))
                          : y ys
                          -> case eta1 of wild1 {
                               []
                               -> GHC.Types.[] @ (GHC.Types.Int, (GHC.Types.Int, GHC.Types.Int))
                               : y1 ys1
                               -> GHC.Types.:
                                    @ (GHC.Types.Int, (GHC.Types.Int, GHC.Types.Int))
                                    (case Checks.scoreBoard tile (Types.put board tile y) of wild2 {
                                       GHC.Base.Nothing -> Player.BestNext.playerBestNext3
                                       GHC.Base.Just i -> i },
                                     y1)
                                    (go ys ys1) } }
                    } in
                    case go moves moves of wild {
                      [] -> case Player.BestNext.$smaximum1 ret_ty Types.Move of {}
                      : ipv ipv1
                      -> case ipv of ww { (,) ww1 ww2 ->
                         case Player.BestNext.$wgo1 ipv1 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                         ww5 } } } #)) -}
e67074b1af84d562ed71bc5ffe58af78
  playerBestNext3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -2#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

